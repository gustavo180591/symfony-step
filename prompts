Quiero que diseñes un sistema completo, modular y profesional, que gestione procesos o datos sensibles con múltiples actores (ciudadanos, operadores, administradores, etc.). Este sistema debe ser adaptable a contextos públicos, privados, educativos o corporativos.

Debe incluir:

---

1. 🎯 OBJETIVO GENERAL  
   - ¿Cuál es el propósito del sistema?
   - ¿Qué problemas resuelve?
   - ¿Cuáles son sus funcionalidades clave?

---

2. 👤 TIPOS DE USUARIOS Y ROLES (RBAC avanzado + posibilidad de extender a ABAC)  
   - Lista detallada de roles: Usuario, Moderador, Admin Local, Admin Global, Auditor, Sysadmin.
   - Permisos por módulo y acción.
   - Delegación temporal, suspensión, ACL por módulo.
   - Soporte para roles combinados.

---

3. 📊 MODELO DE DATOS Y RELACIONES  
   - Entidades, atributos, claves, relaciones.
   - Diagrama E-R sugerido.
   - Validaciones, tipos de datos, restricciones, indices.
   - Multi-tenant opcional.
   - Seeds iniciales.

---

4. 🛍️ FUNCIONALIDAD DE CARRITO DE COMPRA  
   - Estructura del carrito: productos, variantes, cantidades, descuentos.
   - Operaciones: agregar/quitar producto, actualizar cantidad, vaciar carrito.
   - Modo anónimo y modo autenticado (persistencia local + en servidor).
   - Integración con pagos (simulado o real: Stripe, MercadoPago, etc.).
   - Resumen de compra, pasos del checkout, validaciones.
   - Historial de compras por usuario.
   - Soporte para cupones y promociones.

---

5. 🗂️ ESTRUCTURA DE PROYECTO Y ARQUITECTURA DE CARPETAS  
   - Estructura modular escalable para frontend, backend y base de datos.
   - Cada carpeta/archivo con su función clara:
     - 📁 `/modules` → lógica de dominio separada
     - 📁 `/components` → UI modular, reutilizable
     - 📁 `/routes` → rutas protegidas/públicas
     - 📁 `/api` → endpoints REST/GraphQL
     - 📁 `/services` → conexión con APIs internas y externas
     - 📁 `/stores` → estado global, auth, carrito, notificaciones
     - 📁 `/config` → constantes, envs, middlewares, plugins
     - 📁 `/tests` → pruebas unitarias, e2e, mocks
   - Backend desacoplado: Symfony, NestJS o Express.
   - Frontend con SvelteKit modularizado.

---

6. 🧩 MODULARIZACIÓN  
   - Clean Architecture o Hexagonal.
   - Plugins por funcionalidad (e.g. módulo de notificaciones, módulo de carrito).
   - Facilitar desacoplamiento y tests por módulo.

---

7. 💻 FRONTEND (SvelteKit recomendado)  
   - Diseño moderno y accesible.
   - Modo oscuro, i18n, componentes reusables.
   - Stores globales para sesión, estado de usuario y carrito.
   - UX fluida con validaciones, carga progresiva y notificaciones.

---

8. 📱 APP MÓVIL (PWA o Capacitor exportable)  
   - Compartir lógica con el frontend web.
   - Acceso a APIs nativas: cámara, GPS, notificaciones push.
   - Responsive + usable offline.

---

9. 🔐 AUTENTICACIÓN Y SEGURIDAD  
   - JWT + OAuth2 con scopes.
   - Middleware de autenticación y autorización.
   - CSRF, XSS, brute-force prevention.
   - Auditoría completa de acciones de usuarios.

---

10. 🌐 API REST/GraphQL  
    - Rutas protegidas y públicas.
    - Documentación OpenAPI/Swagger.
    - Esquemas de entrada/salida validados.

---

11. 🧪 TESTING  
    - Unitarios con Jest o PHPUnit.
    - E2E con Playwright o Cypress.
    - Pruebas de API y rutas.
    - Coverage e integración en CI/CD.

---

12. 🚀 DEVOPS Y DESPLIEGUE  
    - Docker y Docker Compose.
    - CI/CD con GitHub Actions o GitLab.
    - Monitoreo: Prometheus + Grafana.
    - Backups automáticos y versionado de datos.

---

13. 📈 ESCALABILIDAD Y MANTENIMIENTO  
    - PostgreSQL particionado.
    - Redis para caché/sesiones.
    - Websockets o colas con RabbitMQ para tareas pesadas.
    - CDN para assets.
    - Blue-green deployment o canary releases.

---

14. 🛠️ EXTRAS  
    - Sistema de notificaciones modular.
    - Panel de métricas y rendimiento.
    - Tokens de API para integraciones externas.
    - Trazabilidad completa.
    - Modo mantenimiento y restauración de backups desde panel.
    - Feature flags y entorno multi-idioma desde el inicio.

---

🧠 Respondé con una solución completa para este sistema, anticipando posibles problemas, justificando elecciones técnicas y proponiendo una arquitectura escalable, segura, modular y visualmente moderna.
