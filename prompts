Quiero que diseñes un sistema completo, modular y profesional, que gestione procesos o datos sensibles con múltiples actores (ciudadanos, operadores, administradores, etc.). Este sistema debe ser adaptable a contextos públicos, privados, educativos o corporativos.

Debe incluir:

---

1. 🎯 OBJETIVO GENERAL  
   - ¿Cuál es el propósito del sistema?
   - ¿Qué problemas resuelve?
   - ¿Cuáles son sus funcionalidades clave?

---

2. 👤 TIPOS DE USUARIOS Y ROLES (con RBAC avanzado y soporte para ABAC)  
   - Lista detallada de roles y permisos.
   - Soporte para delegaciones temporales, ACL por módulo, suspensión, modo revisión.

---

3. 📊 MODELO DE DATOS Y RELACIONES  
   - Entidades, atributos, relaciones, claves primarias y foráneas.
   - Validaciones, normalización, ERD.
   - Soporte para multi-tenant si aplica.

---

4. 🗂️ ESTRUCTURA DE PROYECTO Y ARQUITECTURA DE CARPETAS  
   - Generá una estructura de carpetas y archivos completa, orientada a componentes, servicios y módulos.  
   - Cada carpeta y archivo debe tener:
     - Un nombre coherente.
     - Una descripción clara de su función.
     - Relación entre módulos (cómo se comunican).
     - Separación entre dominio, presentación, infraestructura y lógica de negocio.

   ➕ Incluí:
   - Frontend (SvelteKit)
   - Backend (Node/Nest o Symfony)
   - Configuración (envs, build, Docker)
   - Base de datos y seeds
   - Scripts y testing
   - CI/CD y monitoreo

---

5. 🧩 MODULARIZACIÓN  
   - Explicá cómo separar funcionalidades en módulos independientes.
   - Cómo escalar con plugins o microservicios si crece.
   - Aplicar principios de Clean Architecture o Hexagonal si corresponde.

---

6. 💻 FRONTEND (con SvelteKit o similar)  
   - Estructura de páginas, componentes, layouts y stores.
   - Rutas públicas y protegidas.
   - Acceso a APIs, formularios, validación y notificaciones.
   - Diseño moderno: limpio, responsivo, accesible (modo oscuro, i18n opcional).

---

7. 📱 APP MÓVIL (PWA o exportación con Capacitor)  
   - Acceso a cámara, geolocalización, notificaciones.
   - Mismo stack y código que el web (cuando sea posible).

---

8. 🔐 AUTENTICACIÓN Y SEGURIDAD  
   - JWT + OAuth2 con scopes.
   - Roles, permisos y sesiones.
   - Protección XSS, CSRF, rate limits.
   - Logs de auditoría.

---

9. 🌐 API (RESTful o GraphQL + OpenAPI)  
   - Endpoints detallados por entidad.
   - Esquemas de entrada/salida.
   - Control de errores, paginación, filtros.

---

10. 🧪 TESTING  
    - Unitarios, integración y e2e.
    - Herramientas recomendadas.
    - Qué probar, cómo y con qué frecuencia (CI/CD).

---

11. 🚀 DEVOPS Y DESPLIEGUE  
    - Docker, GitHub Actions/GitLab CI.
    - Staging/production con variables seguras.
    - Kubernetes si escala.
    - Monitoreo y backups automatizados.

---

12. 📈 ESCALABILIDAD Y MANTENIMIENTO  
    - PostgreSQL particionado, Redis para sesiones/cache.
    - CDN para archivos/media.
    - Arquitectura desacoplada.
    - Escalado horizontal y vertical.
    - Blue/green deploy, feature flags.

---

13. 🛠️ EXTRAS  
    - Sistema de notificaciones (push, SMS, mail).
    - Panel de rendimiento.
    - Trazabilidad (quién hizo qué y cuándo).
    - Soporte para multi-idioma desde el inicio.
    - Token de API para integraciones futuras.

---

💬 Respondeme con una solución completa basada en este prompt. Anticipate a problemas comunes, justificá elecciones técnicas y proponé una solución moderna, escalable, modular y segura.

